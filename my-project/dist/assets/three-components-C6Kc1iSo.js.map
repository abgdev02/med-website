{"version":3,"file":"three-components-C6Kc1iSo.js","sources":["../../node_modules/three/examples/jsm/math/SimplexNoise.js","../../src/components/three-d/ProceduralPebble.tsx","../../src/components/three-d/SceneManager.tsx"],"sourcesContent":["// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nclass SimplexNoise {\n\n\tconstructor( r = Math ) {\n\n\t\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\t\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t\t\t[ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t\t\t[ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t\t\t[ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t\t\t[ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t\t\t[ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t\t\t[ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t\t\t[ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\t\tthis.p = [];\n\n\t\tfor ( let i = 0; i < 256; i ++ ) {\n\n\t\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t\t}\n\n\t\t// To remove the need for index wrapping, double the permutation table length\n\t\tthis.perm = [];\n\n\t\tfor ( let i = 0; i < 512; i ++ ) {\n\n\t\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t\t}\n\n\t\t// A lookup table to traverse the simplex around a given point in 4D.\n\t\t// Details can be found where this table is used, in the 4D noise method.\n\t\tthis.simplex = [\n\t\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n\t}\n\n\tdot( g, x, y ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n\t}\n\n\tdot3( g, x, y, z ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n\t}\n\n\tdot4( g, x, y, z, w ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n\t}\n\n\tnoise( xin, yin ) {\n\n\t\tlet n0; // Noise contributions from the three corners\n\t\tlet n1;\n\t\tlet n2;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\t\tconst s = ( xin + yin ) * F2; // Hairy factor for 2D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\t\tconst t = ( i + j ) * G2;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y) space\n\t\tconst Y0 = j - t;\n\t\tconst x0 = xin - X0; // The x,y distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\n\t\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n\t\tlet j1;\n\t\tif ( x0 > y0 ) {\n\n\t\t\ti1 = 1; j1 = 0;\n\n\t\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t\t}\telse {\n\n\t\t\ti1 = 0; j1 = 1;\n\n\t\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t\t// c = (3-sqrt(3))/6\n\t\tconst x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\t\tconst y1 = y0 - j1 + G2;\n\t\tconst x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\t\tconst y2 = y0 - 1.0 + 2.0 * G2;\n\t\t// Work out the hashed gradient indices of the three simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t\t// Calculate the contribution from the three corners\n\t\tlet t0 = 0.5 - x0 * x0 - y0 * y0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t\t}\n\n\t\tlet t1 = 0.5 - x1 * x1 - y1 * y1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t\t}\n\n\t\tlet t2 = 0.5 - x2 * x2 - y2 * y2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to return values in the interval [-1,1].\n\t\treturn 70.0 * ( n0 + n1 + n2 );\n\n\t}\n\n\t// 3D simplex noise\n\tnoise3d( xin, yin, zin ) {\n\n\t\tlet n0; // Noise contributions from the four corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F3 = 1.0 / 3.0;\n\t\tconst s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst k = Math.floor( zin + s );\n\t\tconst G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\t\tconst t = ( i + j + k ) * G3;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst x0 = xin - X0; // The x,y,z distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\t\tconst z0 = zin - Z0;\n\n\t\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second corner of simplex in (i,j,k) coords\n\n\t\tlet j1;\n\t\tlet k1;\n\t\tlet i2; // Offsets for third corner of simplex in (i,j,k) coords\n\t\tlet j2;\n\t\tlet k2;\n\t\tif ( x0 >= y0 ) {\n\n\t\t\tif ( y0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t\t// X Y Z order\n\n\t\t\t} else if ( x0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t\t// X Z Y order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t} // Z X Y order\n\n\t\t} else { // x0<y0\n\n\t\t\tif ( y0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Z Y X order\n\n\t\t\t} else if ( x0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Y Z X order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t} // Y X Z order\n\n\t\t}\n\n\t\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t\t// c = 1/6.\n\t\tconst x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\t\tconst y1 = y0 - j1 + G3;\n\t\tconst z1 = z0 - k1 + G3;\n\t\tconst x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G3;\n\t\tconst z2 = z0 - k2 + 2.0 * G3;\n\t\tconst x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\t\tconst y3 = y0 - 1.0 + 3.0 * G3;\n\t\tconst z3 = z0 - 1.0 + 3.0 * G3;\n\t\t// Work out the hashed gradient indices of the four simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\t\tconst gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t\t// Calculate the contribution from the four corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to stay just inside [-1,1]\n\t\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n\t}\n\n\t// 4D simplex noise\n\tnoise4d( x, y, z, w ) {\n\n\t\t// For faster and easier lookups\n\t\tconst grad4 = this.grad4;\n\t\tconst simplex = this.simplex;\n\t\tconst perm = this.perm;\n\n\t\t// The skewing and unskewing factors are hairy again for the 4D case\n\t\tconst F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\t\tconst G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\t\tlet n0; // Noise contributions from the five corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\tlet n4;\n\t\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\t\tconst s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\t\tconst i = Math.floor( x + s );\n\t\tconst j = Math.floor( y + s );\n\t\tconst k = Math.floor( z + s );\n\t\tconst l = Math.floor( w + s );\n\t\tconst t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst W0 = l - t;\n\t\tconst x0 = x - X0; // The x,y,z,w distances from the cell origin\n\t\tconst y0 = y - Y0;\n\t\tconst z0 = z - Z0;\n\t\tconst w0 = w - W0;\n\n\t\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t\t// To find out which of the 24 possible simplices we're in, we need to\n\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t\t// then find the correct traversal order for the simplex we’re in.\n\t\t// First, six pair-wise comparisons are performed between each possible pair\n\t\t// of the four coordinates, and the results are used to add up binary bits\n\t\t// for an integer index.\n\t\tconst c1 = ( x0 > y0 ) ? 32 : 0;\n\t\tconst c2 = ( x0 > z0 ) ? 16 : 0;\n\t\tconst c3 = ( y0 > z0 ) ? 8 : 0;\n\t\tconst c4 = ( x0 > w0 ) ? 4 : 0;\n\t\tconst c5 = ( y0 > w0 ) ? 2 : 0;\n\t\tconst c6 = ( z0 > w0 ) ? 1 : 0;\n\t\tconst c = c1 + c2 + c3 + c4 + c5 + c6;\n\n\t\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\t\tconst i1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\t\tconst j1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\t\tconst k1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\t\tconst l1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\t\tconst i2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\t\tconst j2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0;\n\t\tconst k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\t\tconst l2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\t\tconst i3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\t\tconst j3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\t\tconst k3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\t\tconst l3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\t\tconst x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\t\tconst y1 = y0 - j1 + G4;\n\t\tconst z1 = z0 - k1 + G4;\n\t\tconst w1 = w0 - l1 + G4;\n\t\tconst x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G4;\n\t\tconst z2 = z0 - k2 + 2.0 * G4;\n\t\tconst w2 = w0 - l2 + 2.0 * G4;\n\t\tconst x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\t\tconst y3 = y0 - j3 + 3.0 * G4;\n\t\tconst z3 = z0 - k3 + 3.0 * G4;\n\t\tconst w3 = w0 - l3 + 3.0 * G4;\n\t\tconst x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\t\tconst y4 = y0 - 1.0 + 4.0 * G4;\n\t\tconst z4 = z0 - 1.0 + 4.0 * G4;\n\t\tconst w4 = w0 - 1.0 + 4.0 * G4;\n\t\t// Work out the hashed gradient indices of the five simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst ll = l & 255;\n\t\tconst gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\t\tconst gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\t\tconst gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\t\tconst gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\t\tconst gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t\t// Calculate the contribution from the five corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t\t}\n\n\t\tlet t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\t\tif ( t4 < 0 ) n4 = 0.0;\n\t\telse {\n\n\t\t\tt4 *= t4;\n\t\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t\t}\n\n\t\t// Sum up and scale the result to cover the range [-1,1]\n\t\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n\t}\n\n}\n\nexport { SimplexNoise };\n","import { useRef, useEffect, useMemo } from 'react'\r\nimport { \r\n  SphereGeometry,\r\n  BufferGeometry,\r\n  BufferAttribute,\r\n  Mesh,\r\n  MeshStandardMaterial,\r\n  Color,\r\n  Vector2,\r\n  CanvasTexture,\r\n  RepeatWrapping\r\n} from 'three'\r\nimport { SimplexNoise } from 'three/examples/jsm/math/SimplexNoise.js'\r\nimport { LRUCache } from '../../utils/LRUCache'\r\n\r\n// Cache noise instance globally to avoid recreation\r\nconst globalSimplex = new SimplexNoise()\r\n\r\n// Replace Map with LRU Cache for better memory management\r\nconst geometryCache = new LRUCache<string, BufferGeometry>(50)\r\n\r\n// Create optimized textures once and cache them\r\nconst createOptimizedTextures = () => {\r\n  // Much smaller texture for better performance\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = 128\r\n  canvas.height = 128\r\n  const context = canvas.getContext('2d')!  \r\n  const imageData = context.createImageData(128, 128)\r\n  for (let i = 0; i < imageData.data.length; i += 4) {\r\n    const noise = Math.random()\r\n    const value = Math.floor(220 + noise * 10)\r\n    imageData.data[i] = value - 1\r\n    imageData.data[i + 1] = value\r\n    imageData.data[i + 2] = value + 1\r\n    imageData.data[i + 3] = 255\r\n  }\r\n  context.putImageData(imageData, 0, 0)\r\n  \r\n  const colorTexture = new CanvasTexture(canvas)\r\n  colorTexture.wrapS = RepeatWrapping\r\n  colorTexture.wrapT = RepeatWrapping\r\n  colorTexture.repeat.set(1.2, 1.2)\r\n    \r\n  // Simplified normal map\r\n  const normalCanvas = document.createElement('canvas')\r\n  normalCanvas.width = 64\r\n  normalCanvas.height = 64\r\n  const normalContext = normalCanvas.getContext('2d')!\r\n  const normalImageData = normalContext.createImageData(64, 64)\r\n  for (let i = 0; i < normalImageData.data.length; i += 4) {\r\n    normalImageData.data[i] = Math.floor(128 + (Math.random() - 0.5) * 8)\r\n    normalImageData.data[i + 1] = Math.floor(128 + (Math.random() - 0.5) * 8)\r\n    normalImageData.data[i + 2] = Math.floor(220 + Math.random() * 20)\r\n    normalImageData.data[i + 3] = 255\r\n  }\r\n  normalContext.putImageData(normalImageData, 0, 0)\r\n  \r\n  const normalTexture = new CanvasTexture(normalCanvas)\r\n  normalTexture.wrapS = RepeatWrapping\r\n  normalTexture.wrapT = RepeatWrapping\r\n  \r\n  return { colorTexture, normalTexture }\r\n}\r\n\r\n// Cache textures globally to avoid recreation on every component mount\r\nconst cachedTextures = createOptimizedTextures()\r\n\r\ninterface ProceduralPebbleProps {\r\n  distance?: number\r\n  quality?: 'low' | 'medium' | 'high'\r\n  enableTextures?: boolean\r\n  isStatic?: boolean\r\n}\r\n\r\nexport function ProceduralPebble({ \r\n  distance = 10, \r\n  quality = 'medium',\r\n  enableTextures = true,\r\n  isStatic = false\r\n}: ProceduralPebbleProps = {}) {  const mesh = useRef<Mesh>(null!)\r\n  \r\n  // Dynamic geometry based on distance and quality - LOD (Level of Detail)\r\n  const geometryArgs = useMemo((): [number, number, number] => {\r\n    const qualityMap = {\r\n      low: distance > 30 ? [0.8, 12, 8] : [0.8, 16, 12],\r\n      medium: distance > 30 ? [0.8, 20, 14] : [0.8, 32, 24],\r\n      high: distance > 30 ? [0.8, 32, 24] : [0.8, 48, 32]\r\n    }\r\n    return qualityMap[quality] as [number, number, number]\r\n  }, [distance, quality])\r\n\r\n  // Cached geometry with pre-computed modifications\r\n  const processedGeometry = useMemo(() => {\r\n    const cacheKey = `${geometryArgs.join('-')}-${distance}-${isStatic}`\r\n    \r\n    if (geometryCache.has(cacheKey)) {\r\n      return geometryCache.get(cacheKey)!.clone()\r\n    }\r\n\r\n    const geo = new SphereGeometry(...geometryArgs)\r\n    \r\n    // Only modify geometry if not static\r\n    if (!isStatic) {\r\n      const pos = geo.attributes.position as BufferAttribute\r\n      const bump = distance > 25 ? 0.008 : 0.015\r\n      const noiseScale1 = distance > 25 ? 0.3 : 0.4\r\n      const noiseScale2 = distance > 25 ? 0.8 : 1.2\r\n      const flattenFactor = 0.92\r\n\r\n      // Use single loop with optimized calculations\r\n      for (let i = 0; i < pos.count; i++) {\r\n        const x = pos.getX(i)\r\n        const y = pos.getY(i)\r\n        const z = pos.getZ(i)\r\n\r\n        // Simplified noise calculation - fewer layers for better performance\r\n        let totalNoise: number\r\n        if (distance > 25) {\r\n          // Single noise layer for distant objects\r\n          totalNoise = globalSimplex.noise3d(x * noiseScale1, y * noiseScale1, z * noiseScale1)\r\n        } else {\r\n          // Dual layer noise for close objects\r\n          const n1 = globalSimplex.noise3d(x * noiseScale1, y * noiseScale1, z * noiseScale1) * 0.8\r\n          const n2 = globalSimplex.noise3d(x * noiseScale2, y * noiseScale2, z * noiseScale2) * 0.2\r\n          totalNoise = n1 + n2\r\n        }\r\n\r\n        pos.setXYZ(\r\n          i,\r\n          x + totalNoise * bump * Math.abs(x),\r\n          y * flattenFactor + totalNoise * bump * 0.1,\r\n          z + totalNoise * bump * Math.abs(z)\r\n        )\r\n      }\r\n      \r\n      pos.needsUpdate = true\r\n      geo.computeVertexNormals()\r\n    }\r\n\r\n    // Cache the geometry\r\n    geometryCache.set(cacheKey, geo)\r\n    return geo.clone()\r\n  }, [geometryArgs, distance, isStatic])\r\n  \r\n  // Optimized material with conditional texture loading\r\n  const material = useMemo(() => {\r\n    const baseProps = {\r\n      color: new Color(0.98, 0.98, 0.98),\r\n      roughness: 0.8,\r\n      metalness: 0.02,\r\n      envMapIntensity: 0.12,\r\n    }\r\n\r\n    // Only add textures if close enough and enabled\r\n    if (enableTextures && distance < 25) {\r\n      return new MeshStandardMaterial({\r\n        ...baseProps,\r\n        map: cachedTextures.colorTexture,\r\n        normalMap: cachedTextures.normalTexture,\r\n        normalScale: new Vector2(0.3, 0.3),\r\n      })\r\n    }\r\n\r\n    // Simplified material for distant objects\r\n    return new MeshStandardMaterial(baseProps)\r\n  }, [distance, enableTextures])\r\n\r\n  // Apply processed geometry to mesh when it mounts\r\n  useEffect(() => {\r\n    if (mesh.current && processedGeometry) {\r\n      mesh.current.geometry = processedGeometry\r\n    }\r\n  }, [processedGeometry])\r\n  \r\n  // No internal animation - relying on Float component wrapper for movement\r\n  \r\n  return (\r\n    <mesh ref={mesh} material={material} castShadow receiveShadow>\r\n      <sphereGeometry args={geometryArgs} />\r\n    </mesh>\r\n  )\r\n}","import { useRef, useEffect } from 'react'\r\nimport { useThree } from '@react-three/fiber'\r\nimport { FrustumCuller } from '../../utils/FrustumCuller'\r\nimport { SpatialHashGrid } from '../../utils/SpatialHashGrid'\r\nimport { globalAnimationScheduler } from '../../utils/AnimationScheduler'\r\nimport { globalPerformanceMonitor } from '../../utils/PerformanceMonitor'\r\n\r\n/**\r\n * Scene Manager component that handles global 3D scene optimizations\r\n * - Frustum culling for performance\r\n * - Spatial partitioning for proximity queries\r\n * - Performance monitoring and adaptation\r\n */\r\nexport function SceneManager() {\r\n  const { scene, camera } = useThree()\r\n  const frustumCullerRef = useRef<FrustumCuller>()\r\n  const spatialGridRef = useRef<SpatialHashGrid>()\r\n  // Initialize spatial systems\r\n  useEffect(() => {\r\n    // Initialize frustum culler (no camera needed in constructor)\r\n    frustumCullerRef.current = new FrustumCuller()\r\n    \r\n    // Initialize spatial hash grid with reasonable cell size for the scene\r\n    spatialGridRef.current = new SpatialHashGrid(50) // 50 unit cells\r\n    \r\n    console.log('🎯 Scene Manager: Spatial systems initialized')\r\n    \r\n    return () => {\r\n      frustumCullerRef.current = undefined\r\n      spatialGridRef.current = undefined\r\n    }\r\n  }, [camera])\r\n\r\n  // Register performance monitoring and culling with animation scheduler\r\n  useEffect(() => {\r\n    const taskId = 'scene-manager-optimization'\r\n      globalAnimationScheduler.addTask({\r\n      id: taskId,\r\n      priority: 8, // High priority for scene management\r\n      updateInterval: 100, // Run every ~6 frames for efficiency\r\n      callback: () => {\r\n        if (!frustumCullerRef.current || !spatialGridRef.current) return\r\n\r\n        // Update global performance monitor\r\n        globalPerformanceMonitor.update()\r\n        const perfLevel = globalPerformanceMonitor.getPerformanceLevel()\r\n        \r\n        // Adaptive quality based on performance\r\n        const isLowPerformance = perfLevel === 'low'\r\n        const isHighPerformance = perfLevel === 'high'\r\n\r\n        // Update frustum culling\r\n        frustumCullerRef.current.updateCamera(camera)\r\n        const cullingResults = frustumCullerRef.current.cullObjects()\r\n        \r\n        // Update spatial grid with visible objects\r\n        spatialGridRef.current.clear()\r\n        cullingResults.visible.forEach((item: { id: string; object: any }) => {\r\n          if (item.object.position) {\r\n            spatialGridRef.current!.insert(item.id, item.object.position)\r\n          }\r\n        })\r\n\r\n        // Adaptive LOD management based on performance\r\n        scene.traverse((object) => {\r\n          if (object.userData.isOptimizable) {\r\n            const distance = camera.position.distanceTo(object.position)\r\n            \r\n            // Adaptive quality settings\r\n            let targetQuality: 'low' | 'medium' | 'high'\r\n            if (isLowPerformance) {\r\n              targetQuality = distance > 20 ? 'low' : 'medium'\r\n            } else if (isHighPerformance) {\r\n              targetQuality = distance > 30 ? 'medium' : 'high'\r\n            } else {\r\n              targetQuality = distance > 25 ? 'low' : distance > 15 ? 'medium' : 'high'\r\n            }\r\n\r\n            // Update object quality if it has the capability\r\n            if (object.userData.updateQuality && object.userData.currentQuality !== targetQuality) {\r\n              object.userData.updateQuality(targetQuality)\r\n              object.userData.currentQuality = targetQuality\r\n            }\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      globalAnimationScheduler.removeTask(taskId)\r\n    }\r\n  }, [scene, camera])  // Performance monitoring for development\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const performanceLevel = globalPerformanceMonitor.getPerformanceLevel()\r\n      const schedulerStats = globalAnimationScheduler.getFrameStats()\r\n      \r\n      console.log('🔧 Performance Metrics:', {\r\n        'Performance Level': performanceLevel,\r\n        'Animation Efficiency': Math.round(schedulerStats.efficiency * 100) + '%',\r\n        'Scheduler Tasks': globalAnimationScheduler.getTaskCount(),\r\n        'Spatial Objects': spatialGridRef.current?.getStats().totalObjects || 0\r\n      })\r\n    }, 5000) // Log every 5 seconds\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  // Expose utilities to global window for debugging\r\n  useEffect(() => {\r\n    (window as any).sceneDebug = {\r\n      frustumCuller: frustumCullerRef.current,\r\n      spatialGrid: spatialGridRef.current,\r\n      getPerformanceLevel: () => globalPerformanceMonitor.getPerformanceLevel(),\r\n      getSchedulerStats: () => globalAnimationScheduler.getFrameStats()\r\n    }\r\n  }, [])\r\n\r\n  // This component doesn't render anything visible\r\n  return null\r\n}\r\n"],"names":["SimplexNoise","r","i","g","x","y","z","w","xin","yin","n0","n1","n2","F2","j","G2","t","X0","Y0","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","zin","n3","s","k","G3","Z0","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","gi3","t3","grad4","simplex","perm","F4","G4","n4","l","W0","w0","c1","c2","c3","c4","c5","c6","c","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4","globalSimplex","geometryCache","LRUCache","createOptimizedTextures","canvas","context","imageData","noise","value","colorTexture","CanvasTexture","RepeatWrapping","normalCanvas","normalContext","normalImageData","normalTexture","cachedTextures","ProceduralPebble","distance","quality","enableTextures","isStatic","mesh","useRef","geometryArgs","useMemo","processedGeometry","cacheKey","geo","SphereGeometry","pos","bump","noiseScale1","noiseScale2","flattenFactor","totalNoise","material","baseProps","Color","MeshStandardMaterial","Vector2","useEffect","jsx","SceneManager","scene","camera","useThree","frustumCullerRef","spatialGridRef","FrustumCuller","SpatialHashGrid","taskId","globalAnimationScheduler","globalPerformanceMonitor","perfLevel","isLowPerformance","isHighPerformance","cullingResults","item","object","targetQuality","interval","performanceLevel","schedulerStats","_a"],"mappings":"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","x_google_ignoreList":[0]}